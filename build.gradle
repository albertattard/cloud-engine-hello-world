plugins {
  id "application"

  id "org.jetbrains.kotlin.jvm" version "1.3.72"
  id "org.jetbrains.kotlin.kapt" version "1.3.72"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"

  id "com.github.johnrengelman.shadow" version "5.2.0"
}

repositories {
  jcenter()
}

configurations {
  developmentOnly
}

dependencies {
  def kotlin = "1.3.72"
  def micronaut = "2.0.0.M3"
  def jacksonModuleKotlin = "2.11.0.rc1"
  def logbackClassic = "1.2.3"
  def logbackJson = "0.1.5"
  def hikari = "3.4.2"
  def exposed = "0.17.7"
  def postgresql = "42.2.12"
  def mockk = "1.9.3"
  def kotlintest = "1.1.5"
  def kotlintestRunner = "3.4.0"

  kapt(enforcedPlatform("io.micronaut:micronaut-bom:$micronaut"))
  kapt("io.micronaut:micronaut-inject-java")
  kapt("io.micronaut:micronaut-validation")
  implementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronaut"))
  implementation("io.micronaut:micronaut-inject")
  implementation("io.micronaut:micronaut-validation")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin")
  implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin")
  implementation("io.micronaut:micronaut-runtime")
  implementation("javax.annotation:javax.annotation-api")
  implementation("io.micronaut:micronaut-http-server-netty")
  implementation("io.micronaut:micronaut-http-client")
  runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlin")

  runtimeOnly("ch.qos.logback:logback-classic:$logbackClassic")
  runtimeOnly("ch.qos.logback.contrib:logback-jackson:$logbackJson")
  runtimeOnly("ch.qos.logback.contrib:logback-json-classic:$logbackJson")

  /* Data */
  implementation("io.micronaut.configuration:micronaut-jdbc-hikari")
  implementation("com.zaxxer:HikariCP:$hikari")
  implementation("org.jetbrains.exposed:exposed:$exposed")
  runtimeOnly("org.postgresql:postgresql:$postgresql")

  /* Testing */
  kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronaut"))
  kaptTest("io.micronaut:micronaut-inject-java")
  testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronaut"))
  testImplementation("io.micronaut.test:micronaut-test-kotlintest:$kotlintest")
  testImplementation("io.mockk:mockk:$mockk")
  testImplementation("io.kotlintest:kotlintest-runner-junit5:$kotlintestRunner")
}

test.classpath += configurations.developmentOnly

mainClassName = "com.albertattard.Application"

test {
  useJUnitPlatform()
  testLogging {
    events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
}

allOpen {
  annotation("io.micronaut.aop.Around")
}

compileKotlin {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
    // Will retain parameter names for Java reflection
    javaParameters = true
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
    javaParameters = true
  }
}

shadowJar {
  mergeServiceFiles()
}

tasks.withType(JavaExec) {
  classpath += configurations.developmentOnly
  jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
